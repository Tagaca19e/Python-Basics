#Test cases to execute to validate that our program is working properly
#and meets the requirement for the lab

# ==TEST CASE 1 NO COLLISIONS==================================
KB = [(["Y", "D"], "Z", 0.07), (["A", "B", "E"], "Y", 0.95), (["A"], "X", 1.0), (["C"], "L", 0.85), (["L", "M"], "N", 1.0)]
DB = [("A", 1.0), ("B", 0.70), ("C", 0.75), ("D", 0.80), ("E", 0.50), ("M", -1.0)]
count = [2, 3, 1, 1, 2]
# =============================================================

# ==TEST CASE 2 WITH COLLISIONS NEGATIVE AND POSITIVE=========
# KB = [(["Y", "D"], "Z", 0.07), (["A", "B", "E"], "Y", 0.95), (["A"], "X", 1.0), (["C"], "L", 0.85), (["B"], "A", -0.34), (["L", "M"], "N", 1.0)]
# DB = [("A", 1.0), ("B", 0.70), ("C", 0.75), ("D", 0.80), ("E", 0.50), ("M", -1.0)]
# count = [2, 3, 1, 1, 1, 2]
#===============================================================

# ==TEST CASE 3 WITH COLLISIONS BOTH NEAGATIVE==================
# KB = [(["Y", "D"], "Z", 0.07), (["A", "B", "E"], "Y", 0.95), (["A"], "X", 1.0), (["C"], "L", 0.85), (["B"], "A", -0.34), (["L", "M"], "N", 1.0)]
# DB = [("A", -1.0), ("B", 0.70), ("C", 0.75), ("D", 0.80), ("E", 0.50), ("M", -1.0)]
# count = [2, 3, 1, 1, 1, 2]
#===============================================================

# ==TEST CASE 4 WITH COLLISIONS BOTH POSITIVE ==================
# KB = [(["Y", "D"], "Z", 0.07), (["A", "B", "E"], "Y", 0.95), (["A"], "X", 1.0), (["C"], "L", 0.85), (["B"], "A", 0.34), (["L", "M"], "N", 1.0)]
# DB = [("A", 1.0), ("B", 0.70), ("C", 0.75), ("D", 0.80), ("E", 0.50), ("M", -1.0)]
# count = [2, 3, 1, 1, 1, 2]
#===============================================================

# ==TEST CASE 5 DB IS EMPTY NO COLLISIONS=======================
# KB = [(["Y", "D"], "Z", 0.07), (["A", "B", "E"], "Y", 0.95), (["A"], "X", 1.0), (["C"], "L", 0.85), (["L", "M"], "N", 1.0)]
# DB = []
# count = []
# =============================================================

inferred = []
#checker if literal is in antecedent
def is_in_antecedent(literal, antecedent):
  for ant in antecedent:
    if ant == literal:
      return True
  return False
#checker if literal is in inferred
def in_inferred(val, inferred):
  for i, vals in enumerate(inferred):
    i_val, i_cf = vals 
    if val == i_val:
      return [True, i_cf, i]
  return [False, 100, 100]

def PLFC (KB, DB, q):
  #keep checking if there are literals in DB
  while DB:
    print( "===================")
    print(f"AGENDA: {DB}")
    p = DB.pop(0)
    #break down our p
    val, cf_val= p
    print(f"CHECKING: {val}")
    #if our value is equal to our q then return true
    if (val == q):
      print(f"MATCHED: {val} == {q}")
      return True

    #check if our val is already in inferred
    res = in_inferred(val, inferred)
    checker, original_cf, idx = res
    #if it is not in inferred then just push
    if (checker == False):
      inferred.append(p)
      print(f"Inferred: {inferred}")
    #if its already in the inferred then its collision
    #so we would need to use the formulas to calculate
    #new values for that literal
    else:
      #STEP 1: remove the old literal with CF
      inferred.pop(idx)
      print(f"POPPED OUR ORIGINAL CF: {inferred} ")
      updated_cf = 100
      print(f"ORIGINAL CF: {original_cf} NEW CF: {cf_val}")
      #if both cf1 and cf2 are positive
      if cf_val > 0 and original_cf > 0:
        print("all positive")
        updated_cf = (original_cf + cf_val) * (1-original_cf)
      #if both cf1 and cf2 are negative
      elif cf_val < 0 and original_cf < 0:
        print("all negative")
        updated_cf = (original_cf + cf_val) * (1+original_cf)
      #if c1 and c2 are mixed values
      else:
        print("mixture of both")
        top = (original_cf + cf_val)
        mini = min(cf_val, original_cf)
        bot =  1 - mini
        print(f"{top}/{bot}")
        updated_cf = top / bot
      #after calculating the new CF we put it back
      inferred.append((val, round(updated_cf, 2)))
      print(f"APPENDED: NEW VAL {val} UPDATED: {updated_cf}")
      #since we dont want to loop to our rules again just 
      #break here
      continue

    for i in range(0, len(KB)):
      #get our antecedent, consequent, and our CF for that rule
      antecedent, consequent, cf = KB[i]
      #if val is in antecedent then proceed
      if(is_in_antecedent(val, antecedent) == True):
        #we decrement the rules count
        count[i]-=1
        print(f"COUNT: {count[i]}")
        print(f"LIT: {val} is in {'^'.join(antecedent)} -> {consequent} ({cf})")
        #if the count is 0 then it means the consequent is satisfied
        if count[i] == 0:
          #list for getting the min val if there are any conjunctions
          cf_data = []
          val_data = []
          #get our antecedent values and get their CFs
          for ant in antecedent:
            #using the inferred we get their CFs
            for i in inferred:
              val, cfi = i
              #if our literal matched with a lit in inferred
              #we append it to our storage for cfs
              if ant == val:
                cf_data.append(cfi)
                val_data.append(val)
          #once we have the cf values of antecedent
          #we get the mininum
          candidate = min(cf_data)
          #multiply the consequent CF and antecedent CF
          final_cf = candidate * cf
          print(f"CHOSEN MIN: {val_data} {cf_data} = {candidate} * {consequent}({cf})")
          print(f"PUSHED VAL: {consequent} {final_cf}")
          #after getting th final CF we append it to inferred
          DB.append((consequent, round(final_cf, 2)))
    print( "===================")
  return False
#get users input for the goal
print("Please Enter q: ")
q = input()
isWhat = PLFC(KB, DB, q)
#if PLFC returns False then its is not inferred
isTrue = "not " if not isWhat else ""
print("\n\n")
print(f"{q} is {isTrue}inferred!")
#display the inferred values
print(f"INFERRED: {inferred}")
